From 91635c8fff7e43999bee14e5aa81ca9cc03d3a92 Mon Sep 17 00:00:00 2001
From: Michael Donahoe <michael.donahoe@systematicgroup.com>
Date: Fri, 12 Jul 2019 19:09:58 +0000
Subject: [PATCH] Use curl for provisioning

---
 CMakeLists.txt   |  4 +++-
 CurlPost.cpp     | 68 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 CurlPost.h       | 16 +++++++++++++
 MediaSession.cpp |  5 ++++-
 MediaSession.h   |  2 ++
 Policy.h         | 32 ++++++++++++++++++++++++++
 6 files changed, 125 insertions(+), 2 deletions(-)
 create mode 100644 CurlPost.cpp
 create mode 100644 CurlPost.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ed3c841..33f2b93 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,11 +13,13 @@ set(MODULE_NAME WPEFramework${PLUGIN_NAME})
 
 pkg_check_modules (WIDEVINE widevine)
 pkg_check_modules (WPEFRAMEWORK WPEFrameworkCore)
+pkg_check_modules (CURL libcurl)
 set(PLUGIN_SOURCES
     HostImplementation.cpp
     DeviceCertificate.cpp
     MediaSession.cpp
-    MediaSystem.cpp)
+    MediaSystem.cpp
+    CurlPost.cpp)
 
 # add the library
 add_library(${PLUGIN_NAME} SHARED ${PLUGIN_SOURCES})
diff --git a/CurlPost.cpp b/CurlPost.cpp
new file mode 100644
index 0000000..a856556
--- /dev/null
+++ b/CurlPost.cpp
@@ -0,0 +1,68 @@
+#include "CurlPost.h"
+
+
+size_t CurlPost::CurlWrite_CallbackFunc_StdString(void *contents, size_t size, size_t nmemb, std::string *s)
+{
+    size_t newLength = size*nmemb;
+    try
+    {
+        s->append((char*)contents, newLength);
+    }
+    catch(std::bad_alloc &e)
+    {
+        //handle memory problem
+        return 0;
+    }
+    return newLength;
+}
+
+CurlPost::CurlPost():
+    m_curl(NULL)
+{
+    curl_global_init(CURL_GLOBAL_DEFAULT);
+
+    m_curl = curl_easy_init();
+}
+
+CurlPost::~CurlPost()
+{
+    if(m_curl)
+    {
+        curl_easy_cleanup(m_curl);
+        m_curl = NULL;
+    }
+}
+
+std::string CurlPost::post(const std::string url)
+{
+    std::string response;
+    CURLcode res;
+
+    if(m_curl)
+    {
+        curl_easy_setopt(m_curl, CURLOPT_URL, url.c_str());
+        curl_easy_setopt(m_curl, CURLOPT_POST, 1L);
+ 	curl_easy_setopt(m_curl, CURLOPT_POSTFIELDS, "");
+        curl_easy_setopt(m_curl, CURLOPT_SSL_VERIFYPEER, 0L); //only for https
+        curl_easy_setopt(m_curl, CURLOPT_SSL_VERIFYHOST, 0L); //only for https
+        curl_easy_setopt(m_curl, CURLOPT_WRITEFUNCTION, CurlWrite_CallbackFunc_StdString);
+        curl_easy_setopt(m_curl, CURLOPT_USERAGENT, "User-Agent: Widevine CDM v1.0");
+        curl_easy_setopt(m_curl, CURLOPT_WRITEDATA, &response);
+        curl_easy_setopt (m_curl, CURLOPT_VERBOSE, 1L); //remove this to disable verbose output
+
+
+        /* Perform the request, res will get the return code */
+        res = curl_easy_perform(m_curl);
+        /* Check for errors */
+        if(res != CURLE_OK)
+        {
+            fprintf(stderr, "curl_easy_perform() failed: %s\n",
+                    curl_easy_strerror(res));
+        }
+    }
+    else {
+        fprintf(stderr, "Curl is not initialized for url %s\n",url.c_str());
+    }
+
+    return response;
+}
diff --git a/CurlPost.h b/CurlPost.h
new file mode 100644
index 0000000..7eda730
--- /dev/null
+++ b/CurlPost.h
@@ -0,0 +1,16 @@
+#include <iostream>
+#include <string>
+#include <curl/curl.h>
+
+class CurlPost
+{
+public:
+	CurlPost();
+	~CurlPost();
+	std::string post(const std::string url);
+private:
+	CURL *m_curl;
+    CURLcode m_res;
+
+    static size_t CurlWrite_CallbackFunc_StdString(void *contents, size_t size, size_t nmemb, std::string *s);
+};
diff --git a/MediaSession.cpp b/MediaSession.cpp
index eb7a087..e75b155 100644
--- a/MediaSession.cpp
+++ b/MediaSession.cpp
@@ -177,7 +177,10 @@ void MediaKeySession::onRemoveComplete() {
 void MediaKeySession::onDeferredComplete(widevine::Cdm::Status) {
 }
 
-void MediaKeySession::onDirectIndividualizationRequest(const string&) {
+void MediaKeySession::onDirectIndividualizationRequest(const string& message) {
+  std::string uri = kCpProductionProvisioningServerUrl + "&signedRequest=" + message;
+  std::string response = m_curl.post(uri);  
+  m_cdm->handleProvisioningResponse(response);
 }
 
 CDMi_RESULT MediaKeySession::Load(void) {
diff --git a/MediaSession.h b/MediaSession.h
index 8448e94..f78da86 100644
--- a/MediaSession.h
+++ b/MediaSession.h
@@ -19,6 +19,7 @@
 
 #include <cdm.h>
 #include <cdmi.h>
+#include "CurlPost.h"
 
 namespace CDMi
 {
@@ -98,6 +99,7 @@ private:
     std::string m_sessionId;
     IMediaKeySessionCallback *m_piCallback;
     uint8_t m_IV[16];
+    CurlPost m_curl;
 };
 
 }  // namespace CDMi
diff --git a/Policy.h b/Policy.h
index 1bc834a..5cd4cbe 100644
--- a/Policy.h
+++ b/Policy.h
@@ -57,4 +57,36 @@ const std::string kCencInitData = a2bs_hex(
     "74220f73747265616d696e675f636c69"
     "7031");
 
+
+// Production Provisioning Server
+const std::string kCpProductionProvisioningServerUrl =
+    "https://www.googleapis.com/"
+    "certificateprovisioning/v1/devicecertificates/create"
+    "?key=AIzaSyB-5OLKTx2iU5mko18DfdwK5611JIjbUhE";
+// NOTE: Provider ID = widevine.com
+const std::string kCpProductionProvisioningServiceCertificate =
+    "0ab9020803121051434fe2a44c763bcc2c826a2d6ef9a718f7d793d005228e02"
+    "3082010a02820101009e27088659dbd9126bc6ed594caf652b0eaab82abb9862"
+    "ada1ee6d2cb5247e94b28973fef5a3e11b57d0b0872c930f351b5694354a8c77"
+    "ed4ee69834d2630372b5331c5710f38bdbb1ec3024cfadb2a8ac94d977d391b7"
+    "d87c20c5c046e9801a9bffaf49a36a9ee6c5163eff5cdb63bfc750cf4a218618"
+    "984e485e23a10f08587ec5d990e9ab0de71460dfc334925f3fb9b55761c61e28"
+    "8398c387a0925b6e4dcaa1b36228d9feff7e789ba6e5ef6cf3d97e6ae05525db"
+    "38f826e829e9b8764c9e2c44530efe6943df4e048c3c5900ca2042c5235dc80d"
+    "443789e734bf8e59a55804030061ed48e7d139b521fbf35524b3000b3e2f6de0"
+    "001f5eeb99e9ec635f02030100013a0c7769646576696e652e636f6d12800332"
+    "2c2f3fedc47f8b7ba88a135a355466e378ed56a6fc29ce21f0cafc7fb253b073"
+    "c55bed253d8650735417aad02afaefbe8d5687902b56a164490d83d590947515"
+    "68860e7200994d322b5de07f82ef98204348a6c2c9619092340eb87df26f63bf"
+    "56c191dc069b80119eb3060d771afaaeb2d30b9da399ef8a41d16f45fd121e09"
+    "a0c5144da8f8eb46652c727225537ad65e2a6a55799909bbfb5f45b5775a1d1e"
+    "ac4e06116c57adfa9ce0672f19b70b876f88e8b9fbc4f96ccc500c676cfb173c"
+    "b6f52601573e2e45af1d9d2a17ef1487348c05cfc6d638ec2cae3fadb655e943"
+    "1330a75d2ceeaa54803e371425111e20248b334a3a50c8eca683c448b8ac402c"
+    "76e6f76e2751fbefb669f05703cec8c64cf7a62908d5fb870375eb0cc96c508e"
+    "26e0c050f3fd3ebe68cef9903ef6405b25fc6e31f93559fcff05657662b3653a"
+    "8598ed5751b38694419242a875d9e00d5a5832933024b934859ec8be78adccbb"
+    "1ec7127ae9afeef9c5cd2e15bd3048e8ce652f7d8c5d595a0323238c598a28";
+
+
 #endif //WV_POLICY_H_
-- 
2.7.4

